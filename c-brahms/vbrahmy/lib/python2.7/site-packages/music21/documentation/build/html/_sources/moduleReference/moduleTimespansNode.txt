.. _moduleTimespansNode:

music21.timespans.node
======================

.. WARNING: DO NOT EDIT THIS FILE:
   AUTOMATICALLY GENERATED.
   PLEASE EDIT THE .py FILE DIRECTLY.

.. automodule:: music21.timespans.node

TimespanTreeNode
----------------

.. autoclass:: music21.timespans.node.TimespanTreeNode

.. rubric:: :class:`~music21.timespans.node.TimespanTreeNode` bases

- :class:`~music21.timespans.node.AVLNode`
- :class:`~music21.common.SlottedObject`

.. rubric:: :class:`~music21.timespans.node.TimespanTreeNode` read/write properties

Read/write properties inherited from :class:`~music21.timespans.node.AVLNode`:

.. hlist::
   :columns: 3

   - :attr:`~music21.timespans.node.AVLNode.leftChild`
   - :attr:`~music21.timespans.node.AVLNode.rightChild`

.. rubric:: :class:`~music21.timespans.node.TimespanTreeNode` methods

Methods inherited from :class:`~music21.timespans.node.AVLNode`:

.. hlist::
   :columns: 3

   - :meth:`~music21.timespans.node.AVLNode.debug`
   - :meth:`~music21.timespans.node.AVLNode.getDebugPieces`
   - :meth:`~music21.timespans.node.AVLNode.update`

.. rubric:: :class:`~music21.timespans.node.TimespanTreeNode` instance variables

.. attribute:: TimespanTreeNode.endTimeHigh

	
	The highest stop offset of any timespan in any node of the subtree
	rooted on this node.
	

.. attribute:: TimespanTreeNode.endTimeLow

	
	The lowest stop offset of any timespan in any node of the subtree
	rooted on this node.
	

.. attribute:: TimespanTreeNode.nodeStartIndex

	
	The timespan start index (i.e., the first x where s[x] is found in this Node's payload)
	of only those timespans stored in the payload of this node.
	

.. attribute:: TimespanTreeNode.nodeStopIndex

	
	The timespan stop index (i.e., the last x where s[x] is found in this Node's payload)
	of only those timespans stored in the payload of this node.
	

.. attribute:: TimespanTreeNode.payload

	
	A list of Timespans starting at this node's start offset.
	
	>>> score = timespans.makeExampleScore()
	>>> tree = timespans.streamToTimespanTree(score, flatten=True, classList=(note.Note, chord.Chord))
	>>> print(tree.rootNode.debug())
	<Node: Start:3.0 Indices:(0:5:6:12) Length:{1}>
	L: <Node: Start:1.0 Indices:(0:2:3:5) Length:{1}>
	L: <Node: Start:0.0 Indices:(0:0:2:2) Length:{2}>
	R: <Node: Start:2.0 Indices:(3:3:5:5) Length:{2}>
	R: <Node: Start:5.0 Indices:(6:8:9:12) Length:{1}>
	L: <Node: Start:4.0 Indices:(6:6:8:8) Length:{2}>
	R: <Node: Start:6.0 Indices:(9:9:11:12) Length:{2}>
	R: <Node: Start:7.0 Indices:(11:11:12:12) Length:{1}>
	
	>>> tree.rootNode.payload
	[<ElementTimespan (3.0 to 4.0) <music21.note.Note F>>]
	
	>>> tree.rootNode.leftChild.payload
	[<ElementTimespan (1.0 to 2.0) <music21.note.Note D>>]
	
	>>> for x in tree.rootNode.leftChild.rightChild.payload:
	...     x
	...
	<ElementTimespan (2.0 to 3.0) <music21.note.Note E>>
	<ElementTimespan (2.0 to 4.0) <music21.note.Note G>>
	
	>>> tree.rootNode.rightChild.payload
	[<ElementTimespan (5.0 to 6.0) <music21.note.Note A>>]
	

.. attribute:: TimespanTreeNode.subTreeStartIndex

	
	The lowest timespan start index of any timespan in any node of the
	subtree rooted on this node.
	

.. attribute:: TimespanTreeNode.subtreeStopIndex

	
	The highest timespan stop index of any timespan in any node of the
	subtree rooted on this node.
	

Instance variables inherited from :class:`~music21.timespans.node.AVLNode`:

.. hlist::
   :columns: 3

   - :attr:`~music21.timespans.node.AVLNode.balance`
   - :attr:`~music21.timespans.node.AVLNode.height`
   - :attr:`~music21.timespans.node.AVLNode.offset`

AVLNode
-------

.. autoclass:: music21.timespans.node.AVLNode

.. rubric:: :class:`~music21.timespans.node.AVLNode` bases

- :class:`~music21.common.SlottedObject`

.. rubric:: :class:`~music21.timespans.node.AVLNode` read/write properties

.. autoattribute:: music21.timespans.node.AVLNode.leftChild

.. autoattribute:: music21.timespans.node.AVLNode.rightChild

.. rubric:: :class:`~music21.timespans.node.AVLNode` methods

.. automethod:: music21.timespans.node.AVLNode.debug

.. automethod:: music21.timespans.node.AVLNode.getDebugPieces

.. automethod:: music21.timespans.node.AVLNode.update

.. rubric:: :class:`~music21.timespans.node.AVLNode` instance variables

.. attribute:: AVLNode.balance

	
	Returns the current state of the difference in heights of the two subtrees rooted on this node.
	
	This attribute is used to help balance the AVL tree.
	
	>>> score = timespans.makeExampleScore()
	>>> tree = timespans.streamToTimespanTree(score, flatten=True, classList=(note.Note, chord.Chord))
	>>> print(tree.debug())
	<Node: Start:3.0 Indices:(0:5:6:12) Length:{1}>
	L: <Node: Start:1.0 Indices:(0:2:3:5) Length:{1}>
	L: <Node: Start:0.0 Indices:(0:0:2:2) Length:{2}>
	R: <Node: Start:2.0 Indices:(3:3:5:5) Length:{2}>
	R: <Node: Start:5.0 Indices:(6:8:9:12) Length:{1}>
	L: <Node: Start:4.0 Indices:(6:6:8:8) Length:{2}>
	R: <Node: Start:6.0 Indices:(9:9:11:12) Length:{2}>
	R: <Node: Start:7.0 Indices:(11:11:12:12) Length:{1}>
	
	
	This tree has one more depth on the right than on the left
	
	>>> tree.rootNode.balance
	1
	
	
	The leftChild of the rootNote is perfectly balanced, while the rightChild is off by
	one (acceptable).
	
	>>> tree.rootNode.leftChild.balance
	0
	>>> tree.rootNode.rightChild.balance
	1
	
	
	The rightChild's children are also (acceptably) unbalanced:
	
	>>> tree.rootNode.rightChild.leftChild.balance
	0
	>>> tree.rootNode.rightChild.rightChild.balance
	1
	

.. attribute:: AVLNode.height

	
	The height of the subtree rooted on this node.
	
	This property is used to help balance the AVL tree.
	
	>>> score = timespans.makeExampleScore()
	>>> tree = timespans.streamToTimespanTree(score, flatten=True, classList=(note.Note, chord.Chord))
	>>> print(tree.debug())
	<Node: Start:3.0 Indices:(0:5:6:12) Length:{1}>
	L: <Node: Start:1.0 Indices:(0:2:3:5) Length:{1}>
	L: <Node: Start:0.0 Indices:(0:0:2:2) Length:{2}>
	R: <Node: Start:2.0 Indices:(3:3:5:5) Length:{2}>
	R: <Node: Start:5.0 Indices:(6:8:9:12) Length:{1}>
	L: <Node: Start:4.0 Indices:(6:6:8:8) Length:{2}>
	R: <Node: Start:6.0 Indices:(9:9:11:12) Length:{2}>
	R: <Node: Start:7.0 Indices:(11:11:12:12) Length:{1}>
	
	>>> tree.rootNode.height
	3
	
	>>> tree.rootNode.rightChild.height
	2
	
	>>> tree.rootNode.rightChild.rightChild.height
	1
	
	>>> tree.rootNode.rightChild.rightChild.rightChild.height
	0
	

.. attribute:: AVLNode.offset

	
	The offset of this node.
	
	>>> score = timespans.makeExampleScore()
	>>> tree = timespans.streamToTimespanTree(score, flatten=True, classList=(note.Note, chord.Chord))
	>>> print(tree.rootNode.debug())
	<Node: Start:3.0 Indices:(0:5:6:12) Length:{1}>
	L: <Node: Start:1.0 Indices:(0:2:3:5) Length:{1}>
	L: <Node: Start:0.0 Indices:(0:0:2:2) Length:{2}>
	R: <Node: Start:2.0 Indices:(3:3:5:5) Length:{2}>
	R: <Node: Start:5.0 Indices:(6:8:9:12) Length:{1}>
	L: <Node: Start:4.0 Indices:(6:6:8:8) Length:{2}>
	R: <Node: Start:6.0 Indices:(9:9:11:12) Length:{2}>
	R: <Node: Start:7.0 Indices:(11:11:12:12) Length:{1}>
	
	>>> tree.rootNode.offset
	3.0
	
	>>> tree.rootNode.leftChild.offset
	1.0
	
	>>> tree.rootNode.rightChild.offset
	5.0
	
